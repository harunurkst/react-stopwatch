{"version":3,"sources":["components/Title/Title.js","components/App.js","serviceWorker.js","index.js"],"names":["Title","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","title","isInput","setState","objectSpread","event","target","value","_this2","output","react_default","a","createElement","className","onChange","inputChange","type","onClick","editHandler","Component","App","components_Title_Title","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2PA8DeA,qBAvDX,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACdE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACTC,MAAO,qBACPC,SAAS,GALCT,6EAUdG,KAAKO,SAALT,OAAAU,EAAA,EAAAV,CAAA,GACOE,KAAKI,MADZ,CAEIE,SAAS,yCAILG,GACRT,KAAKO,SAALT,OAAAU,EAAA,EAAAV,CAAA,GACOE,KAAKI,MADZ,CAEIC,MAAOI,EAAMC,OAAOC,0CAKnB,IAAAC,EAAAZ,KACDa,EAAS,KAsBb,OApBIA,EADAb,KAAKI,MAAME,QAEPQ,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SACAC,UAAU,eACVC,SAAW,SAACT,GAAD,OAAWG,EAAKO,YAAYV,IACvCW,KAAK,OACLT,MAAOX,KAAKI,MAAMC,SAMtBS,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAcjB,KAAKI,MAAMC,OACvCS,EAAAC,EAAAC,cAAA,QAAMK,QAAU,kBAAIT,EAAKU,eAAeL,UAAU,qBAC9CH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,wBAMzBH,EAAAC,EAAAC,cAAA,WACMH,UAnDEU,cCcLC,MAff,WACE,OACEV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACXH,EAAAC,EAAAC,cAACS,EAAD,WCEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECVNC,IAASC,OAAOlB,EAAAC,EAAAC,cAACiB,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7ec4c32c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Title.css'\n\n\n\nclass Title extends Component {\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            title: 'This is demo title',\n            isInput: false\n        };\n    }\n\n    editHandler (){\n        this.setState({\n            ...this.state,\n            isInput: true\n        })\n    }\n\n    inputChange(event){\n        this.setState({\n            ...this.state,\n            title: event.target.value\n        })\n    }\n\n\n    render() {\n        let output = null \n        if (this.state.isInput){\n            output = (\n                <div>\n                    <input \n                    className=\"form-control\" \n                    onChange={ (event) => this.inputChange(event)}\n                    type=\"text\" \n                    value={this.state.title}\n                     />\n                </div>\n            )\n        } else {\n            output = (\n                <div className=\"d-flex Title\">\n                    <h2 className=\"display-4\">{ this.state.title }</h2>\n                    <span onClick={ ()=>this.editHandler() }className=\"ml-auto edit-icon\">\n                        <i className=\"fas fa-pencil-alt\"></i>\n                    </span>\n                </div>\n            )\n        }\n        return (\n            <div>\n                { output }\n            </div>\n        )\n    }\n}\n\nexport default Title ","import React from 'react';\nimport './App.css';\nimport Title from './Title/Title';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"container py-5\">\n          <div className=\"row\">\n              <div className=\"col-sm-8 offset-sm-2\">\n                  <Title />\n              </div>\n          </div>\n          \n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}